local playfab = require "playfab_defold.playfab"
local collection = require "ludobits.m.collection"

local function show_spinner()
	msg.post("main:/spinner#spinner", "show")
end

local function hide_spinner()
	msg.post("main:/spinner#spinner", "hide")
end

local function unload(self)
	for c,_ in pairs(self.loaded_collections) do
		self.loaded_collections[c] = nil
		collection.unload(c)
	end
end

local function load(self, proxy, callback)
	if self.loaded_collections[proxy] then
		return
	end
	self.loaded_collections[proxy] = true
	collection.load(proxy, callback)
end

local function show_startmenu(self)
	show_spinner()
	unload(self)
	load(self, "#startmenu_proxy", hide_spinner)
end

local function show_login(self)
	show_spinner()
	unload(self)
	load(self, "#login_proxy", hide_spinner)
end

local function show_register(self)
	show_spinner()
	unload(self)
	load(self, "#register_proxy", hide_spinner)
end

local function show_game(self)
	show_spinner()
	unload(self)
	load(self, "#game_proxy", hide_spinner)
end


function init(self)
	msg.post("@render:", "clear_color", { color = vmath.vector4(95 /256, 129 / 256, 161 / 256, 1 ) })
	msg.post(".", "acquire_input_focus")
	playfab.init("6DE1")
	self.loaded_collections = {}
	show_startmenu(self)
end

function final(self)
	msg.post(".", "release_input_focus")
end

function on_message(self, message_id, message, sender)
	collection.on_message(message_id, message, sender)
	if message_id == hash("show_game") then
		show_game(self)
	elseif message_id == hash("show_login") then
		show_login(self)
	elseif message_id == hash("show_register") then
		show_register(self)
	elseif message_id == hash("show_startmenu") then
		show_startmenu(self)
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
