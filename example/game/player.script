go.property("health", 5)

local navigate = require "example.navigate"
local user_data = require "example.playfab.user_data"
local leaderboard = require "example.playfab.leaderboard"
local flow = require "ludobits.m.flow"
local input = require "ludobits.m.input"
local platformer = require "ludobits.m.platformer"

local LEFT = hash("left")
local RIGHT = hash("right")
local JUMP = hash("jump")

local DEFAULT_COLOR = "pink"

local function game_over(self)
	self.game_over = true
	flow.start(function()
		local response, error = leaderboard.update(self.score)
		pprint(response)
		pprint(error)
		flow.delay(2)
		navigate.leaderboard()
	end)
end

local function take_damage(self, amount)
	self.health = self.health - (amount or 1)
	if self.health <= 0 then
		game_over(self)
	else
		flow.start(function()
			msg.post("#hurt_sound", "play_sound")
			msg.post("game:/game#hud", "update_health", { health = self.health })
			msg.post("#enemycollider", "disable")
			for i=1,3 do
				flow.until_callback(function(cb)
					go.cancel_animations("#sprite","tint")
					go.animate("#sprite","tint", go.PLAYBACK_ONCE_PINGPONG, vmath.vector4(10,10,10,1), go.EASING_INCUBIC, 0.4, 0, cb)
				end)
			end
			msg.post("#enemycollider", "enable")
		end)
	end
end

local function increas_score(self, amount)
	self.score = self.score + amount
	msg.post("game:/game#hud", "update_score", { score = self.score })
end

local function play_walk_animation(self)
	local avatar = user_data.get("avatar", DEFAULT_COLOR)
	local animation = hash(avatar .. "_player_walk")
	if self.animation ~= animation then
		self.animation = animation
		msg.post("#sprite", "play_animation", { id = animation })
	end
end

local function play_idle_animation(self)
	local avatar = user_data.get("avatar", DEFAULT_COLOR)
	local animation = hash(avatar .. "_player_idle")
	if self.animation ~= animation then
		self.animation = animation
		msg.post("#sprite", "play_animation", { id = animation })
	end
end

local function play_jump_animation(self)
	local avatar = user_data.get("avatar", DEFAULT_COLOR)
	local animation = hash(avatar .. "_player_jump")
	if self.animation ~= animation then
		self.animation = animation
		msg.post("#sprite", "play_animation", { id = animation })
	end
end

function init(self)
	input.acquire()
	self.physics = platformer.create({ hash("ground"), hash("enemy_jump") })
	self.physics.gravity = -200
	self.score = 0
	play_idle_animation(self)
	msg.post("game:/game#hud", "update_health", { health = self.health })
	msg.post("game:/game#hud", "update_score", { score = self.score })
end

function final(self)
	input.release()
	flow.stop(msg.url())
end

function update(self, dt)
	flow.update()
	if self.game_over then
		return
	end

	if input.is_pressed("left") then
		self.physics.left(40)
		sprite.set_hflip("#sprite", true)
		if not self.physics.is_jumping() then
			play_walk_animation(self)
		end
	elseif input.is_pressed("right") then
		self.physics.right(40)
		sprite.set_hflip("#sprite", false)
		if not self.physics.is_jumping() then
			play_walk_animation(self)
		end
	else
		self.physics.stop()
		if not self.physics.is_jumping() then
			play_idle_animation(self)
		end
	end
	
	self.physics.update(dt)
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
	if self.game_over then
		return
	end

	self.physics.on_message(message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.group == hash("enemy") then
			if message.normal.y == 1 then
				msg.post(message.other_id, "die")
				increas_score(self, 100)
			else
				take_damage(self)
			end
		elseif message.group == hash("death") then
			game_over(self)
		end
	end
end

function on_input(self, action_id, action)
	input.update(action_id, action)
	if self.game_over then
		return
	end

	if action_id == JUMP then
		if action.pressed then
			msg.post("#jump_sound", "play_sound")
			self.physics.jump(140, true)
			play_jump_animation(self)
		elseif action.released then
			self.physics.abort_jump()
		end
	end
end

function on_reload(self)
end
