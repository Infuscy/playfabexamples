local user_data = require "example.playfab.user_data"
local input = require "ludobits.m.input"
local platformer = require "ludobits.m.platformer"

local LEFT = hash("left")
local RIGHT = hash("right")
local JUMP = hash("jump")

local DEFAULT_COLOR = "pink"

local function play_walk_animation(self)
	local avatar = user_data.get("avatar", DEFAULT_COLOR)
	local animation = hash(avatar .. "_player_walk")
	if self.animation ~= animation then
		self.animation = animation
		msg.post("#sprite", "play_animation", { id = animation })
	end
end

local function play_idle_animation(self)
	local avatar = user_data.get("avatar", DEFAULT_COLOR)
	local animation = hash(avatar .. "_player_idle")
	if self.animation ~= animation then
		self.animation = animation
		msg.post("#sprite", "play_animation", { id = animation })
	end
end

local function play_jump_animation(self)
	local avatar = user_data.get("avatar", DEFAULT_COLOR)
	local animation = hash(avatar .. "_player_jump")
	if self.animation ~= animation then
		self.animation = animation
		msg.post("#sprite", "play_animation", { id = animation })
	end
end

function init(self)
	input.acquire()
	self.physics = platformer.create({ hash("ground") })
	self.physics.gravity = -200
	play_idle_animation(self)
end

function final(self)
	input.release()
end

function update(self, dt)
	if input.is_pressed("left") then
		self.physics.left(40)
		sprite.set_hflip("#sprite", true)
		if not self.physics.is_jumping() then
			play_walk_animation(self)
		end
	elseif input.is_pressed("right") then
		self.physics.right(40)
		sprite.set_hflip("#sprite", false)
		if not self.physics.is_jumping() then
			play_walk_animation(self)
		end
	else
		self.physics.stop()
		if not self.physics.is_jumping() then
			play_idle_animation(self)
		end
	end
	
	self.physics.update(dt)
end

function on_message(self, message_id, message, sender)
	self.physics.on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	input.update(action_id, action)
	if action_id == JUMP then
		if action.pressed then
			self.physics.jump(140, true)
			play_jump_animation(self)
		elseif action.released then
			self.physics.abort_jump()
		end
	end
end

function on_reload(self)
end
